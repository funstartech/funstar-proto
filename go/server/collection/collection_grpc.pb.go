// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: collection.proto

package collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionSvrClient is the client API for CollectionSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionSvrClient interface {
	// 拉取赏排序流列表
	GetCollectionList(ctx context.Context, in *GetCollectionListReq, opts ...grpc.CallOption) (*GetCollectionListRsp, error)
	// 批量拉取赏基础信息
	BatchGetCollectionBasic(ctx context.Context, in *BatchGetCollectionBasicReq, opts ...grpc.CallOption) (*BatchGetCollectionBasicRsp, error)
	// 拉取赏详情
	GetCollectionDetail(ctx context.Context, in *GetCollectionDetailReq, opts ...grpc.CallOption) (*GetCollectionDetailRsp, error)
	// 抽奖（支持多抽）
	Lottery(ctx context.Context, in *LotteryReq, opts ...grpc.CallOption) (*LotteryRsp, error)
}

type collectionSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionSvrClient(cc grpc.ClientConnInterface) CollectionSvrClient {
	return &collectionSvrClient{cc}
}

func (c *collectionSvrClient) GetCollectionList(ctx context.Context, in *GetCollectionListReq, opts ...grpc.CallOption) (*GetCollectionListRsp, error) {
	out := new(GetCollectionListRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.collection.CollectionSvr/GetCollectionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvrClient) BatchGetCollectionBasic(ctx context.Context, in *BatchGetCollectionBasicReq, opts ...grpc.CallOption) (*BatchGetCollectionBasicRsp, error) {
	out := new(BatchGetCollectionBasicRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.collection.CollectionSvr/BatchGetCollectionBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvrClient) GetCollectionDetail(ctx context.Context, in *GetCollectionDetailReq, opts ...grpc.CallOption) (*GetCollectionDetailRsp, error) {
	out := new(GetCollectionDetailRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.collection.CollectionSvr/GetCollectionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionSvrClient) Lottery(ctx context.Context, in *LotteryReq, opts ...grpc.CallOption) (*LotteryRsp, error) {
	out := new(LotteryRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.collection.CollectionSvr/Lottery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionSvrServer is the server API for CollectionSvr service.
// All implementations must embed UnimplementedCollectionSvrServer
// for forward compatibility
type CollectionSvrServer interface {
	// 拉取赏排序流列表
	GetCollectionList(context.Context, *GetCollectionListReq) (*GetCollectionListRsp, error)
	// 批量拉取赏基础信息
	BatchGetCollectionBasic(context.Context, *BatchGetCollectionBasicReq) (*BatchGetCollectionBasicRsp, error)
	// 拉取赏详情
	GetCollectionDetail(context.Context, *GetCollectionDetailReq) (*GetCollectionDetailRsp, error)
	// 抽奖（支持多抽）
	Lottery(context.Context, *LotteryReq) (*LotteryRsp, error)
	mustEmbedUnimplementedCollectionSvrServer()
}

// UnimplementedCollectionSvrServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionSvrServer struct {
}

func (UnimplementedCollectionSvrServer) GetCollectionList(context.Context, *GetCollectionListReq) (*GetCollectionListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionList not implemented")
}
func (UnimplementedCollectionSvrServer) BatchGetCollectionBasic(context.Context, *BatchGetCollectionBasicReq) (*BatchGetCollectionBasicRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetCollectionBasic not implemented")
}
func (UnimplementedCollectionSvrServer) GetCollectionDetail(context.Context, *GetCollectionDetailReq) (*GetCollectionDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionDetail not implemented")
}
func (UnimplementedCollectionSvrServer) Lottery(context.Context, *LotteryReq) (*LotteryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lottery not implemented")
}
func (UnimplementedCollectionSvrServer) mustEmbedUnimplementedCollectionSvrServer() {}

// UnsafeCollectionSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionSvrServer will
// result in compilation errors.
type UnsafeCollectionSvrServer interface {
	mustEmbedUnimplementedCollectionSvrServer()
}

func RegisterCollectionSvrServer(s grpc.ServiceRegistrar, srv CollectionSvrServer) {
	s.RegisterService(&CollectionSvr_ServiceDesc, srv)
}

func _CollectionSvr_GetCollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvrServer).GetCollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.collection.CollectionSvr/GetCollectionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvrServer).GetCollectionList(ctx, req.(*GetCollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvr_BatchGetCollectionBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetCollectionBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvrServer).BatchGetCollectionBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.collection.CollectionSvr/BatchGetCollectionBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvrServer).BatchGetCollectionBasic(ctx, req.(*BatchGetCollectionBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvr_GetCollectionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvrServer).GetCollectionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.collection.CollectionSvr/GetCollectionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvrServer).GetCollectionDetail(ctx, req.(*GetCollectionDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionSvr_Lottery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LotteryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionSvrServer).Lottery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.collection.CollectionSvr/Lottery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionSvrServer).Lottery(ctx, req.(*LotteryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionSvr_ServiceDesc is the grpc.ServiceDesc for CollectionSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "funstar.server.collection.CollectionSvr",
	HandlerType: (*CollectionSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollectionList",
			Handler:    _CollectionSvr_GetCollectionList_Handler,
		},
		{
			MethodName: "BatchGetCollectionBasic",
			Handler:    _CollectionSvr_BatchGetCollectionBasic_Handler,
		},
		{
			MethodName: "GetCollectionDetail",
			Handler:    _CollectionSvr_GetCollectionDetail_Handler,
		},
		{
			MethodName: "Lottery",
			Handler:    _CollectionSvr_Lottery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collection.proto",
}
