// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductSvrClient is the client API for ProductSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductSvrClient interface {
	// 批量拉取商品基础信息
	BatchGetProductBasic(ctx context.Context, in *BatchGetProductBasicReq, opts ...grpc.CallOption) (*BatchGetProductBasicRsp, error)
	// 拉取商品详情
	GetProductDetail(ctx context.Context, in *GetProductDetailReq, opts ...grpc.CallOption) (*GetProductDetailRsp, error)
	// 设置商品库存
	SetProductStock(ctx context.Context, in *SetProductStockReq, opts ...grpc.CallOption) (*SetProductStockRsp, error)
}

type productSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSvrClient(cc grpc.ClientConnInterface) ProductSvrClient {
	return &productSvrClient{cc}
}

func (c *productSvrClient) BatchGetProductBasic(ctx context.Context, in *BatchGetProductBasicReq, opts ...grpc.CallOption) (*BatchGetProductBasicRsp, error) {
	out := new(BatchGetProductBasicRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.product.ProductSvr/BatchGetProductBasic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSvrClient) GetProductDetail(ctx context.Context, in *GetProductDetailReq, opts ...grpc.CallOption) (*GetProductDetailRsp, error) {
	out := new(GetProductDetailRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.product.ProductSvr/GetProductDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSvrClient) SetProductStock(ctx context.Context, in *SetProductStockReq, opts ...grpc.CallOption) (*SetProductStockRsp, error) {
	out := new(SetProductStockRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.product.ProductSvr/SetProductStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSvrServer is the server API for ProductSvr service.
// All implementations must embed UnimplementedProductSvrServer
// for forward compatibility
type ProductSvrServer interface {
	// 批量拉取商品基础信息
	BatchGetProductBasic(context.Context, *BatchGetProductBasicReq) (*BatchGetProductBasicRsp, error)
	// 拉取商品详情
	GetProductDetail(context.Context, *GetProductDetailReq) (*GetProductDetailRsp, error)
	// 设置商品库存
	SetProductStock(context.Context, *SetProductStockReq) (*SetProductStockRsp, error)
	mustEmbedUnimplementedProductSvrServer()
}

// UnimplementedProductSvrServer must be embedded to have forward compatible implementations.
type UnimplementedProductSvrServer struct {
}

func (UnimplementedProductSvrServer) BatchGetProductBasic(context.Context, *BatchGetProductBasicReq) (*BatchGetProductBasicRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetProductBasic not implemented")
}
func (UnimplementedProductSvrServer) GetProductDetail(context.Context, *GetProductDetailReq) (*GetProductDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (UnimplementedProductSvrServer) SetProductStock(context.Context, *SetProductStockReq) (*SetProductStockRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProductStock not implemented")
}
func (UnimplementedProductSvrServer) mustEmbedUnimplementedProductSvrServer() {}

// UnsafeProductSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSvrServer will
// result in compilation errors.
type UnsafeProductSvrServer interface {
	mustEmbedUnimplementedProductSvrServer()
}

func RegisterProductSvrServer(s grpc.ServiceRegistrar, srv ProductSvrServer) {
	s.RegisterService(&ProductSvr_ServiceDesc, srv)
}

func _ProductSvr_BatchGetProductBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetProductBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSvrServer).BatchGetProductBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.product.ProductSvr/BatchGetProductBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSvrServer).BatchGetProductBasic(ctx, req.(*BatchGetProductBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSvr_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSvrServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.product.ProductSvr/GetProductDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSvrServer).GetProductDetail(ctx, req.(*GetProductDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSvr_SetProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProductStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSvrServer).SetProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.product.ProductSvr/SetProductStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSvrServer).SetProductStock(ctx, req.(*SetProductStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSvr_ServiceDesc is the grpc.ServiceDesc for ProductSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "funstar.server.product.ProductSvr",
	HandlerType: (*ProductSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchGetProductBasic",
			Handler:    _ProductSvr_BatchGetProductBasic_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _ProductSvr_GetProductDetail_Handler,
		},
		{
			MethodName: "SetProductStock",
			Handler:    _ProductSvr_SetProductStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
