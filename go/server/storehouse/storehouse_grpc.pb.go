// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: storehouse.proto

package storehouse

import (
	context "context"
	wxpay "github.com/funstartech/funstar-proto/go/wxpay"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorehouseSvrClient is the client API for StorehouseSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorehouseSvrClient interface {
	// 拉取用户仓库
	GetUserStores(ctx context.Context, in *GetUserStoresReq, opts ...grpc.CallOption) (*GetUserStoresRsp, error)
	// 创建提货单
	CreatePickUpOrder(ctx context.Context, in *CreatePickUpOrderReq, opts ...grpc.CallOption) (*CreatePickUpOrderRsp, error)
	// 查询用户提货单
	GetUserPickUpOrders(ctx context.Context, in *GetUserPickUpOrdersReq, opts ...grpc.CallOption) (*GetUserPickUpOrdersRsp, error)
	// 取消提货单
	CancelPickUpOrder(ctx context.Context, in *CancelPickUpOrderReq, opts ...grpc.CallOption) (*CancelPickUpOrderRsp, error)
	// 查询物流信息
	GetDeliveryInfo(ctx context.Context, in *GetDeliveryInfoReq, opts ...grpc.CallOption) (*GetDeliveryInfoRsp, error)
	// 微信支付付款回调
	WxPayCallback(ctx context.Context, in *wxpay.WxPayCallbackReq, opts ...grpc.CallOption) (*wxpay.WxPayCallbackRsp, error)
	// 获取进阶池
	GetLevelUpPool(ctx context.Context, in *GetLevelUpPoolReq, opts ...grpc.CallOption) (*GetLevelUpPoolRsp, error)
	// 仓库商品进阶
	LevelUp(ctx context.Context, in *LevelUpReq, opts ...grpc.CallOption) (*LevelUpRsp, error)
	// 查询进阶记录
	GetLevelUpRecords(ctx context.Context, in *GetLevelUpRecordsReq, opts ...grpc.CallOption) (*GetLevelUpRecordsRsp, error)
	// 获取进阶记录详情
	GetLevelUpRecordInfo(ctx context.Context, in *GetLevelUpRecordInfoReq, opts ...grpc.CallOption) (*GetLevelUpRecordInfoRsp, error)
	// 仓库商品分解
	Decompose(ctx context.Context, in *DecomposeReq, opts ...grpc.CallOption) (*DecomposeRsp, error)
	// 获取分解记录详情
	GetDecomposeRecordInfo(ctx context.Context, in *GetDecomposeRecordInfoReq, opts ...grpc.CallOption) (*GetDecomposeRecordInfoRsp, error)
}

type storehouseSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewStorehouseSvrClient(cc grpc.ClientConnInterface) StorehouseSvrClient {
	return &storehouseSvrClient{cc}
}

func (c *storehouseSvrClient) GetUserStores(ctx context.Context, in *GetUserStoresReq, opts ...grpc.CallOption) (*GetUserStoresRsp, error) {
	out := new(GetUserStoresRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/GetUserStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) CreatePickUpOrder(ctx context.Context, in *CreatePickUpOrderReq, opts ...grpc.CallOption) (*CreatePickUpOrderRsp, error) {
	out := new(CreatePickUpOrderRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/CreatePickUpOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) GetUserPickUpOrders(ctx context.Context, in *GetUserPickUpOrdersReq, opts ...grpc.CallOption) (*GetUserPickUpOrdersRsp, error) {
	out := new(GetUserPickUpOrdersRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/GetUserPickUpOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) CancelPickUpOrder(ctx context.Context, in *CancelPickUpOrderReq, opts ...grpc.CallOption) (*CancelPickUpOrderRsp, error) {
	out := new(CancelPickUpOrderRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/CancelPickUpOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) GetDeliveryInfo(ctx context.Context, in *GetDeliveryInfoReq, opts ...grpc.CallOption) (*GetDeliveryInfoRsp, error) {
	out := new(GetDeliveryInfoRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/GetDeliveryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) WxPayCallback(ctx context.Context, in *wxpay.WxPayCallbackReq, opts ...grpc.CallOption) (*wxpay.WxPayCallbackRsp, error) {
	out := new(wxpay.WxPayCallbackRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/WxPayCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) GetLevelUpPool(ctx context.Context, in *GetLevelUpPoolReq, opts ...grpc.CallOption) (*GetLevelUpPoolRsp, error) {
	out := new(GetLevelUpPoolRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/GetLevelUpPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) LevelUp(ctx context.Context, in *LevelUpReq, opts ...grpc.CallOption) (*LevelUpRsp, error) {
	out := new(LevelUpRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/LevelUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) GetLevelUpRecords(ctx context.Context, in *GetLevelUpRecordsReq, opts ...grpc.CallOption) (*GetLevelUpRecordsRsp, error) {
	out := new(GetLevelUpRecordsRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/GetLevelUpRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) GetLevelUpRecordInfo(ctx context.Context, in *GetLevelUpRecordInfoReq, opts ...grpc.CallOption) (*GetLevelUpRecordInfoRsp, error) {
	out := new(GetLevelUpRecordInfoRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/GetLevelUpRecordInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) Decompose(ctx context.Context, in *DecomposeReq, opts ...grpc.CallOption) (*DecomposeRsp, error) {
	out := new(DecomposeRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/Decompose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storehouseSvrClient) GetDecomposeRecordInfo(ctx context.Context, in *GetDecomposeRecordInfoReq, opts ...grpc.CallOption) (*GetDecomposeRecordInfoRsp, error) {
	out := new(GetDecomposeRecordInfoRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.storehouse.StorehouseSvr/GetDecomposeRecordInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorehouseSvrServer is the server API for StorehouseSvr service.
// All implementations must embed UnimplementedStorehouseSvrServer
// for forward compatibility
type StorehouseSvrServer interface {
	// 拉取用户仓库
	GetUserStores(context.Context, *GetUserStoresReq) (*GetUserStoresRsp, error)
	// 创建提货单
	CreatePickUpOrder(context.Context, *CreatePickUpOrderReq) (*CreatePickUpOrderRsp, error)
	// 查询用户提货单
	GetUserPickUpOrders(context.Context, *GetUserPickUpOrdersReq) (*GetUserPickUpOrdersRsp, error)
	// 取消提货单
	CancelPickUpOrder(context.Context, *CancelPickUpOrderReq) (*CancelPickUpOrderRsp, error)
	// 查询物流信息
	GetDeliveryInfo(context.Context, *GetDeliveryInfoReq) (*GetDeliveryInfoRsp, error)
	// 微信支付付款回调
	WxPayCallback(context.Context, *wxpay.WxPayCallbackReq) (*wxpay.WxPayCallbackRsp, error)
	// 获取进阶池
	GetLevelUpPool(context.Context, *GetLevelUpPoolReq) (*GetLevelUpPoolRsp, error)
	// 仓库商品进阶
	LevelUp(context.Context, *LevelUpReq) (*LevelUpRsp, error)
	// 查询进阶记录
	GetLevelUpRecords(context.Context, *GetLevelUpRecordsReq) (*GetLevelUpRecordsRsp, error)
	// 获取进阶记录详情
	GetLevelUpRecordInfo(context.Context, *GetLevelUpRecordInfoReq) (*GetLevelUpRecordInfoRsp, error)
	// 仓库商品分解
	Decompose(context.Context, *DecomposeReq) (*DecomposeRsp, error)
	// 获取分解记录详情
	GetDecomposeRecordInfo(context.Context, *GetDecomposeRecordInfoReq) (*GetDecomposeRecordInfoRsp, error)
	mustEmbedUnimplementedStorehouseSvrServer()
}

// UnimplementedStorehouseSvrServer must be embedded to have forward compatible implementations.
type UnimplementedStorehouseSvrServer struct {
}

func (UnimplementedStorehouseSvrServer) GetUserStores(context.Context, *GetUserStoresReq) (*GetUserStoresRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStores not implemented")
}
func (UnimplementedStorehouseSvrServer) CreatePickUpOrder(context.Context, *CreatePickUpOrderReq) (*CreatePickUpOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePickUpOrder not implemented")
}
func (UnimplementedStorehouseSvrServer) GetUserPickUpOrders(context.Context, *GetUserPickUpOrdersReq) (*GetUserPickUpOrdersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPickUpOrders not implemented")
}
func (UnimplementedStorehouseSvrServer) CancelPickUpOrder(context.Context, *CancelPickUpOrderReq) (*CancelPickUpOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPickUpOrder not implemented")
}
func (UnimplementedStorehouseSvrServer) GetDeliveryInfo(context.Context, *GetDeliveryInfoReq) (*GetDeliveryInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryInfo not implemented")
}
func (UnimplementedStorehouseSvrServer) WxPayCallback(context.Context, *wxpay.WxPayCallbackReq) (*wxpay.WxPayCallbackRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxPayCallback not implemented")
}
func (UnimplementedStorehouseSvrServer) GetLevelUpPool(context.Context, *GetLevelUpPoolReq) (*GetLevelUpPoolRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelUpPool not implemented")
}
func (UnimplementedStorehouseSvrServer) LevelUp(context.Context, *LevelUpReq) (*LevelUpRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LevelUp not implemented")
}
func (UnimplementedStorehouseSvrServer) GetLevelUpRecords(context.Context, *GetLevelUpRecordsReq) (*GetLevelUpRecordsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelUpRecords not implemented")
}
func (UnimplementedStorehouseSvrServer) GetLevelUpRecordInfo(context.Context, *GetLevelUpRecordInfoReq) (*GetLevelUpRecordInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelUpRecordInfo not implemented")
}
func (UnimplementedStorehouseSvrServer) Decompose(context.Context, *DecomposeReq) (*DecomposeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decompose not implemented")
}
func (UnimplementedStorehouseSvrServer) GetDecomposeRecordInfo(context.Context, *GetDecomposeRecordInfoReq) (*GetDecomposeRecordInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecomposeRecordInfo not implemented")
}
func (UnimplementedStorehouseSvrServer) mustEmbedUnimplementedStorehouseSvrServer() {}

// UnsafeStorehouseSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorehouseSvrServer will
// result in compilation errors.
type UnsafeStorehouseSvrServer interface {
	mustEmbedUnimplementedStorehouseSvrServer()
}

func RegisterStorehouseSvrServer(s grpc.ServiceRegistrar, srv StorehouseSvrServer) {
	s.RegisterService(&StorehouseSvr_ServiceDesc, srv)
}

func _StorehouseSvr_GetUserStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStoresReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).GetUserStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/GetUserStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).GetUserStores(ctx, req.(*GetUserStoresReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_CreatePickUpOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePickUpOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).CreatePickUpOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/CreatePickUpOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).CreatePickUpOrder(ctx, req.(*CreatePickUpOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_GetUserPickUpOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPickUpOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).GetUserPickUpOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/GetUserPickUpOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).GetUserPickUpOrders(ctx, req.(*GetUserPickUpOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_CancelPickUpOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPickUpOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).CancelPickUpOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/CancelPickUpOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).CancelPickUpOrder(ctx, req.(*CancelPickUpOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_GetDeliveryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).GetDeliveryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/GetDeliveryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).GetDeliveryInfo(ctx, req.(*GetDeliveryInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_WxPayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wxpay.WxPayCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).WxPayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/WxPayCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).WxPayCallback(ctx, req.(*wxpay.WxPayCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_GetLevelUpPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelUpPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).GetLevelUpPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/GetLevelUpPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).GetLevelUpPool(ctx, req.(*GetLevelUpPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_LevelUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LevelUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).LevelUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/LevelUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).LevelUp(ctx, req.(*LevelUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_GetLevelUpRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelUpRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).GetLevelUpRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/GetLevelUpRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).GetLevelUpRecords(ctx, req.(*GetLevelUpRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_GetLevelUpRecordInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLevelUpRecordInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).GetLevelUpRecordInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/GetLevelUpRecordInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).GetLevelUpRecordInfo(ctx, req.(*GetLevelUpRecordInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_Decompose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecomposeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).Decompose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/Decompose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).Decompose(ctx, req.(*DecomposeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorehouseSvr_GetDecomposeRecordInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecomposeRecordInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorehouseSvrServer).GetDecomposeRecordInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.storehouse.StorehouseSvr/GetDecomposeRecordInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorehouseSvrServer).GetDecomposeRecordInfo(ctx, req.(*GetDecomposeRecordInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StorehouseSvr_ServiceDesc is the grpc.ServiceDesc for StorehouseSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorehouseSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "funstar.server.storehouse.StorehouseSvr",
	HandlerType: (*StorehouseSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserStores",
			Handler:    _StorehouseSvr_GetUserStores_Handler,
		},
		{
			MethodName: "CreatePickUpOrder",
			Handler:    _StorehouseSvr_CreatePickUpOrder_Handler,
		},
		{
			MethodName: "GetUserPickUpOrders",
			Handler:    _StorehouseSvr_GetUserPickUpOrders_Handler,
		},
		{
			MethodName: "CancelPickUpOrder",
			Handler:    _StorehouseSvr_CancelPickUpOrder_Handler,
		},
		{
			MethodName: "GetDeliveryInfo",
			Handler:    _StorehouseSvr_GetDeliveryInfo_Handler,
		},
		{
			MethodName: "WxPayCallback",
			Handler:    _StorehouseSvr_WxPayCallback_Handler,
		},
		{
			MethodName: "GetLevelUpPool",
			Handler:    _StorehouseSvr_GetLevelUpPool_Handler,
		},
		{
			MethodName: "LevelUp",
			Handler:    _StorehouseSvr_LevelUp_Handler,
		},
		{
			MethodName: "GetLevelUpRecords",
			Handler:    _StorehouseSvr_GetLevelUpRecords_Handler,
		},
		{
			MethodName: "GetLevelUpRecordInfo",
			Handler:    _StorehouseSvr_GetLevelUpRecordInfo_Handler,
		},
		{
			MethodName: "Decompose",
			Handler:    _StorehouseSvr_Decompose_Handler,
		},
		{
			MethodName: "GetDecomposeRecordInfo",
			Handler:    _StorehouseSvr_GetDecomposeRecordInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storehouse.proto",
}
