// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: userinfo.proto

package userinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserInfoSvrClient is the client API for UserInfoSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInfoSvrClient interface {
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error)
	// 批量获取用户信息
	BatchGetUserInfo(ctx context.Context, in *BatchGetUserInfoReq, opts ...grpc.CallOption) (*BatchGetUserInfoRsp, error)
	// 更新用户信息
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoRsp, error)
	// 更新付款信息
	UpdatePayment(ctx context.Context, in *UpdatePaymentReq, opts ...grpc.CallOption) (*UpdatePaymentRsp, error)
	// 删除分销码
	RemShareKey(ctx context.Context, in *RemShareKeyReq, opts ...grpc.CallOption) (*RemShareKeyRsp, error)
	// 获取地址列表
	GetAddressList(ctx context.Context, in *GetAddressListReq, opts ...grpc.CallOption) (*GetAddressListRsp, error)
	// 获取默认地址
	GetDefaultAddress(ctx context.Context, in *GetDefaultAddressReq, opts ...grpc.CallOption) (*GetDefaultAddressRsp, error)
	// 设置默认地址
	SetDefaultAddress(ctx context.Context, in *SetDefaultAddressReq, opts ...grpc.CallOption) (*SetDefaultAddressRsp, error)
	// 获取地址
	GetAddress(ctx context.Context, in *GetAddressReq, opts ...grpc.CallOption) (*GetAddressRsp, error)
	// 添加地址
	AddAddress(ctx context.Context, in *AddAddressReq, opts ...grpc.CallOption) (*AddAddressRsp, error)
	// 更新地址
	UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...grpc.CallOption) (*UpdateAddressRsp, error)
	// 删除地址
	RemAddress(ctx context.Context, in *RemAddressReq, opts ...grpc.CallOption) (*RemAddressRsp, error)
	// 添加星尘
	AddStarDust(ctx context.Context, in *AddStarDustReq, opts ...grpc.CallOption) (*AddStarDustRsp, error)
	// 获取用户星尘数
	GetStardust(ctx context.Context, in *GetStardustReq, opts ...grpc.CallOption) (*GetStardustRsp, error)
	// 获取用户星尘收入
	GetStardustIncome(ctx context.Context, in *GetStardustIncomeReq, opts ...grpc.CallOption) (*GetStardustIncomeRsp, error)
	// 获取用户星尘支出
	GetStardustExpense(ctx context.Context, in *GetStardustExpenseReq, opts ...grpc.CallOption) (*GetStardustExpenseRsp, error)
}

type userInfoSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInfoSvrClient(cc grpc.ClientConnInterface) UserInfoSvrClient {
	return &userInfoSvrClient{cc}
}

func (c *userInfoSvrClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error) {
	out := new(GetUserInfoRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) BatchGetUserInfo(ctx context.Context, in *BatchGetUserInfoReq, opts ...grpc.CallOption) (*BatchGetUserInfoRsp, error) {
	out := new(BatchGetUserInfoRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/BatchGetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoRsp, error) {
	out := new(UpdateUserInfoRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) UpdatePayment(ctx context.Context, in *UpdatePaymentReq, opts ...grpc.CallOption) (*UpdatePaymentRsp, error) {
	out := new(UpdatePaymentRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) RemShareKey(ctx context.Context, in *RemShareKeyReq, opts ...grpc.CallOption) (*RemShareKeyRsp, error) {
	out := new(RemShareKeyRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/RemShareKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) GetAddressList(ctx context.Context, in *GetAddressListReq, opts ...grpc.CallOption) (*GetAddressListRsp, error) {
	out := new(GetAddressListRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/GetAddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) GetDefaultAddress(ctx context.Context, in *GetDefaultAddressReq, opts ...grpc.CallOption) (*GetDefaultAddressRsp, error) {
	out := new(GetDefaultAddressRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/GetDefaultAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) SetDefaultAddress(ctx context.Context, in *SetDefaultAddressReq, opts ...grpc.CallOption) (*SetDefaultAddressRsp, error) {
	out := new(SetDefaultAddressRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/SetDefaultAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) GetAddress(ctx context.Context, in *GetAddressReq, opts ...grpc.CallOption) (*GetAddressRsp, error) {
	out := new(GetAddressRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) AddAddress(ctx context.Context, in *AddAddressReq, opts ...grpc.CallOption) (*AddAddressRsp, error) {
	out := new(AddAddressRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/AddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...grpc.CallOption) (*UpdateAddressRsp, error) {
	out := new(UpdateAddressRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) RemAddress(ctx context.Context, in *RemAddressReq, opts ...grpc.CallOption) (*RemAddressRsp, error) {
	out := new(RemAddressRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/RemAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) AddStarDust(ctx context.Context, in *AddStarDustReq, opts ...grpc.CallOption) (*AddStarDustRsp, error) {
	out := new(AddStarDustRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/AddStarDust", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) GetStardust(ctx context.Context, in *GetStardustReq, opts ...grpc.CallOption) (*GetStardustRsp, error) {
	out := new(GetStardustRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/GetStardust", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) GetStardustIncome(ctx context.Context, in *GetStardustIncomeReq, opts ...grpc.CallOption) (*GetStardustIncomeRsp, error) {
	out := new(GetStardustIncomeRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/GetStardustIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrClient) GetStardustExpense(ctx context.Context, in *GetStardustExpenseReq, opts ...grpc.CallOption) (*GetStardustExpenseRsp, error) {
	out := new(GetStardustExpenseRsp)
	err := c.cc.Invoke(ctx, "/funstar.server.userinfo.UserInfoSvr/GetStardustExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInfoSvrServer is the server API for UserInfoSvr service.
// All implementations must embed UnimplementedUserInfoSvrServer
// for forward compatibility
type UserInfoSvrServer interface {
	// 获取用户信息
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error)
	// 批量获取用户信息
	BatchGetUserInfo(context.Context, *BatchGetUserInfoReq) (*BatchGetUserInfoRsp, error)
	// 更新用户信息
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoRsp, error)
	// 更新付款信息
	UpdatePayment(context.Context, *UpdatePaymentReq) (*UpdatePaymentRsp, error)
	// 删除分销码
	RemShareKey(context.Context, *RemShareKeyReq) (*RemShareKeyRsp, error)
	// 获取地址列表
	GetAddressList(context.Context, *GetAddressListReq) (*GetAddressListRsp, error)
	// 获取默认地址
	GetDefaultAddress(context.Context, *GetDefaultAddressReq) (*GetDefaultAddressRsp, error)
	// 设置默认地址
	SetDefaultAddress(context.Context, *SetDefaultAddressReq) (*SetDefaultAddressRsp, error)
	// 获取地址
	GetAddress(context.Context, *GetAddressReq) (*GetAddressRsp, error)
	// 添加地址
	AddAddress(context.Context, *AddAddressReq) (*AddAddressRsp, error)
	// 更新地址
	UpdateAddress(context.Context, *UpdateAddressReq) (*UpdateAddressRsp, error)
	// 删除地址
	RemAddress(context.Context, *RemAddressReq) (*RemAddressRsp, error)
	// 添加星尘
	AddStarDust(context.Context, *AddStarDustReq) (*AddStarDustRsp, error)
	// 获取用户星尘数
	GetStardust(context.Context, *GetStardustReq) (*GetStardustRsp, error)
	// 获取用户星尘收入
	GetStardustIncome(context.Context, *GetStardustIncomeReq) (*GetStardustIncomeRsp, error)
	// 获取用户星尘支出
	GetStardustExpense(context.Context, *GetStardustExpenseReq) (*GetStardustExpenseRsp, error)
	mustEmbedUnimplementedUserInfoSvrServer()
}

// UnimplementedUserInfoSvrServer must be embedded to have forward compatible implementations.
type UnimplementedUserInfoSvrServer struct {
}

func (UnimplementedUserInfoSvrServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserInfoSvrServer) BatchGetUserInfo(context.Context, *BatchGetUserInfoReq) (*BatchGetUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserInfo not implemented")
}
func (UnimplementedUserInfoSvrServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserInfoSvrServer) UpdatePayment(context.Context, *UpdatePaymentReq) (*UpdatePaymentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedUserInfoSvrServer) RemShareKey(context.Context, *RemShareKeyReq) (*RemShareKeyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemShareKey not implemented")
}
func (UnimplementedUserInfoSvrServer) GetAddressList(context.Context, *GetAddressListReq) (*GetAddressListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressList not implemented")
}
func (UnimplementedUserInfoSvrServer) GetDefaultAddress(context.Context, *GetDefaultAddressReq) (*GetDefaultAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultAddress not implemented")
}
func (UnimplementedUserInfoSvrServer) SetDefaultAddress(context.Context, *SetDefaultAddressReq) (*SetDefaultAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultAddress not implemented")
}
func (UnimplementedUserInfoSvrServer) GetAddress(context.Context, *GetAddressReq) (*GetAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedUserInfoSvrServer) AddAddress(context.Context, *AddAddressReq) (*AddAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedUserInfoSvrServer) UpdateAddress(context.Context, *UpdateAddressReq) (*UpdateAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedUserInfoSvrServer) RemAddress(context.Context, *RemAddressReq) (*RemAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemAddress not implemented")
}
func (UnimplementedUserInfoSvrServer) AddStarDust(context.Context, *AddStarDustReq) (*AddStarDustRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStarDust not implemented")
}
func (UnimplementedUserInfoSvrServer) GetStardust(context.Context, *GetStardustReq) (*GetStardustRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStardust not implemented")
}
func (UnimplementedUserInfoSvrServer) GetStardustIncome(context.Context, *GetStardustIncomeReq) (*GetStardustIncomeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStardustIncome not implemented")
}
func (UnimplementedUserInfoSvrServer) GetStardustExpense(context.Context, *GetStardustExpenseReq) (*GetStardustExpenseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStardustExpense not implemented")
}
func (UnimplementedUserInfoSvrServer) mustEmbedUnimplementedUserInfoSvrServer() {}

// UnsafeUserInfoSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInfoSvrServer will
// result in compilation errors.
type UnsafeUserInfoSvrServer interface {
	mustEmbedUnimplementedUserInfoSvrServer()
}

func RegisterUserInfoSvrServer(s grpc.ServiceRegistrar, srv UserInfoSvrServer) {
	s.RegisterService(&UserInfoSvr_ServiceDesc, srv)
}

func _UserInfoSvr_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_BatchGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).BatchGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/BatchGetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).BatchGetUserInfo(ctx, req.(*BatchGetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).UpdatePayment(ctx, req.(*UpdatePaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_RemShareKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemShareKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).RemShareKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/RemShareKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).RemShareKey(ctx, req.(*RemShareKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/GetAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).GetAddressList(ctx, req.(*GetAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_GetDefaultAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).GetDefaultAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/GetDefaultAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).GetDefaultAddress(ctx, req.(*GetDefaultAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_SetDefaultAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).SetDefaultAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/SetDefaultAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).SetDefaultAddress(ctx, req.(*SetDefaultAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).GetAddress(ctx, req.(*GetAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).AddAddress(ctx, req.(*AddAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).UpdateAddress(ctx, req.(*UpdateAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_RemAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).RemAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/RemAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).RemAddress(ctx, req.(*RemAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_AddStarDust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStarDustReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).AddStarDust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/AddStarDust",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).AddStarDust(ctx, req.(*AddStarDustReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_GetStardust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStardustReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).GetStardust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/GetStardust",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).GetStardust(ctx, req.(*GetStardustReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_GetStardustIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStardustIncomeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).GetStardustIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/GetStardustIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).GetStardustIncome(ctx, req.(*GetStardustIncomeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInfoSvr_GetStardustExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStardustExpenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInfoSvrServer).GetStardustExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funstar.server.userinfo.UserInfoSvr/GetStardustExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInfoSvrServer).GetStardustExpense(ctx, req.(*GetStardustExpenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInfoSvr_ServiceDesc is the grpc.ServiceDesc for UserInfoSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInfoSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "funstar.server.userinfo.UserInfoSvr",
	HandlerType: (*UserInfoSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserInfoSvr_GetUserInfo_Handler,
		},
		{
			MethodName: "BatchGetUserInfo",
			Handler:    _UserInfoSvr_BatchGetUserInfo_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserInfoSvr_UpdateUserInfo_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _UserInfoSvr_UpdatePayment_Handler,
		},
		{
			MethodName: "RemShareKey",
			Handler:    _UserInfoSvr_RemShareKey_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _UserInfoSvr_GetAddressList_Handler,
		},
		{
			MethodName: "GetDefaultAddress",
			Handler:    _UserInfoSvr_GetDefaultAddress_Handler,
		},
		{
			MethodName: "SetDefaultAddress",
			Handler:    _UserInfoSvr_SetDefaultAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _UserInfoSvr_GetAddress_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _UserInfoSvr_AddAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _UserInfoSvr_UpdateAddress_Handler,
		},
		{
			MethodName: "RemAddress",
			Handler:    _UserInfoSvr_RemAddress_Handler,
		},
		{
			MethodName: "AddStarDust",
			Handler:    _UserInfoSvr_AddStarDust_Handler,
		},
		{
			MethodName: "GetStardust",
			Handler:    _UserInfoSvr_GetStardust_Handler,
		},
		{
			MethodName: "GetStardustIncome",
			Handler:    _UserInfoSvr_GetStardustIncome_Handler,
		},
		{
			MethodName: "GetStardustExpense",
			Handler:    _UserInfoSvr_GetStardustExpense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userinfo.proto",
}
