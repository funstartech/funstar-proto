syntax = "proto3";
package funstar.server.storehouse;
option go_package = "github.com/funstartech/funstar-proto/go/server/storehouse";

import "wxpay.proto";
import "common.proto";

enum StoreProductStatus {
  STORE_STATUS_UNPICK_UP = 0; // 未提货
  STORE_STATUS_PICK_UP = 1; //已提货
}

message StoreProduct {
  uint64 store_id = 1;
  funstar.common.Product product = 2;
  int64 create_time = 3;
}

message GetUserStoresReq {
  bytes cookie = 1;
}

message GetUserStoresRsp {
  repeated StoreProduct stores = 1;
  bytes cookie = 2;
  bool is_end = 3;
}

enum PickUpOrderStatus {
  PICKUP_ORDER_STATUS_WAIT_PAY = 0; // 待支付
  PICKUP_ORDER_STATUS_ORDER_PLACED = 1; // 待发货
  PICKUP_ORDER_STATUS_DELIVERY = 2; // 已发货
  PICKUP_ORDER_STATUS_DELIVERED = 3; // 已送达
}

message PickUpOrderInfo {
  PickUpOrderBasic basic = 1;
  PickUpOrderDetail detail = 2;
}

message PickUpOrderBasic {
  uint64 id = 1;
  int64 create_time = 2;
  uint32 status = 3; // 订单状态 PickUpOrderStatus
  int32 total_price = 4; // (单位：分)
  string openid = 5;
  string pids = 6; // 商品列表
  uint32 count = 7;
  string address = 8; // 详细地址
  string shipping_method = 9; // 物流公司
  string shipping_number = 10 ;// 物流单号
}

message PickUpOrderDetail {
  repeated funstar.common.Product products = 1;
}

message CreatePickUpOrderReq {
  repeated uint64 store_ids = 1;
  string address = 2;
}

message CreatePickUpOrderRsp {
  PickUpOrderInfo order_info = 1;
  funstar.wxpay.WxPayment payment = 2;
  bool free_shipping = 3;
}

message GetUserPickUpOrdersReq {
  bytes cookie = 1;
}

message GetUserPickUpOrdersRsp {
  repeated PickUpOrderInfo orders = 1;
  bytes cookie = 2;
  bool is_end = 3;
}

service StorehouseSvr {
  // 拉取用户仓库
  rpc GetUserStores (GetUserStoresReq) returns (GetUserStoresRsp);
  // 创建提货单
  rpc CreatePickUpOrder (CreatePickUpOrderReq) returns (CreatePickUpOrderRsp);
  // 查询用户提货单
  rpc GetUserPickUpOrders (GetUserPickUpOrdersReq) returns (GetUserPickUpOrdersRsp);
}
