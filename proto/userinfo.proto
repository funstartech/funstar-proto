syntax = "proto3";
package funstar.server.userinfo;
option go_package = "github.com/funstartech/funstar-proto/go/server/userinfo";

message UserInfo {
  string openid = 1;
  string avatar = 2;
  string nickname = 3;
  uint32 paid_count = 10; // 已付款单数
  int64 paid_amount = 11; // 已付款金额（分）
  string share_key = 12; // 绑定分销码
  string distributor_id = 13;
  uint64 stardust = 14; // 星尘

  int64 register_time = 20; // 注册时间
  int64 last_pay_time = 21; // 上次付款时间
}

message GetUserInfoReq {
  string share_key = 1;
}

message GetUserInfoRsp {
  UserInfo userinfo = 1;
}

message BatchGetUserInfoReq {
  repeated string openids = 1;
}

message BatchGetUserInfoRsp {
  repeated UserInfo userinfos = 1;
}

message UpdateUserInfoReq {
  UserInfo user = 1;

  bool update_avatar = 11;
  bool update_nickname = 12;
}

message UpdateUserInfoRsp {
}

message UpdatePaymentReq {
  uint32 count = 1;
  int64 payment = 2;
  string share_key = 3;
  string distributor_id = 4;
  int64 pay_time = 5;
}

message UpdatePaymentRsp {
}

message RemShareKeyReq {
}

message RemShareKeyRsp {
}

message UserAddress {
  uint64 id = 1;
  string openid = 2;

  string receiver = 10; // 收货人
  string phone = 11; // 手机号
  string district = 12; // 区域
  string address = 13; // 详细地址

  bool is_default = 20; // 是否是默认地址
  int64 update_ts = 21; // 更新时间
}

message GetAddressListReq {

}

message GetAddressListRsp {
  repeated UserAddress address_list = 1;
}

message GetDefaultAddressReq {
}

message GetDefaultAddressRsp {
  UserAddress address = 1;
}

message SetDefaultAddressReq {
  uint64 address_id = 1;
}

message SetDefaultAddressRsp {

}

message GetAddressReq {
  uint64 address_id = 1;
}

message GetAddressRsp {
  UserAddress address = 1;
}

message AddAddressReq {
  UserAddress address = 1; // 只需要填收货人、手机号、区域、地址、是否默认
}

message AddAddressRsp {

}

message UpdateAddressReq {
  UserAddress address = 1;
}

message UpdateAddressRsp {

}

message RemAddressReq {
  uint64 address_id = 1;
}

message RemAddressRsp {

}

enum StardustRecordType {
  STARDUST_RECORD_TYPE_UNKNOWN = 0;
  STARDUST_RECORD_TYPE_INCOME = 1; // 收入
  STARDUST_RECORD_TYPE_EXPENSE = 2; // 支出

}

enum StardustSource {
  STARDUST_SOURCE_UNKNOWN = 0;
  STARDUST_SOURCE_DECOMPOSE = 1; // 分解
  STARDUST_SOURCE_LOTTERY_ORDER = 10; // 抽奖订单消费
}

message AddStardustReq {
  int32 stardust = 1;
  uint32 source = 2; // 来源 StardustSource

  // 收入字段
  uint32 decompose_count = 10; // 分解数量
  // 支出字段
  uint64 order_id = 20; // 订单编号
}

message AddStardustRsp {

}

message GetStardustReq {
}

message GetStardustRsp {
  uint64 stardust_available = 1; // 可用
  uint64 stardust_freeze = 2; // 冻结
}

message StardustRecordBasic {
  uint64 id = 1;
  string openid = 2;
  int64 create_time = 3;
  int32 stardust = 4;
  uint32 source = 5;
  uint32 record_type = 6;

  // 收入字段
  uint32 decompose_count = 10; // 分解数量
  // 支出字段
  uint64 order_id = 20; // 订单编号
}

message GetStardustRecordReq {
  uint32 record_type = 1; // StardustRecordType
  bytes cookie = 2;
}

message GetStardustRecordRsp {
  repeated StardustRecordBasic records = 1;
  bytes cookie = 2;
  bool is_end = 3;
}

service UserInfoSvr {
  // 获取用户信息
  rpc GetUserInfo (GetUserInfoReq) returns (GetUserInfoRsp);
  // 批量获取用户信息
  rpc BatchGetUserInfo (BatchGetUserInfoReq) returns (BatchGetUserInfoRsp);
  // 更新用户信息
  rpc UpdateUserInfo (UpdateUserInfoReq) returns (UpdateUserInfoRsp);
  // 更新付款信息
  rpc UpdatePayment (UpdatePaymentReq) returns (UpdatePaymentRsp);
  // 删除分销码
  rpc RemShareKey (RemShareKeyReq) returns (RemShareKeyRsp);

  // 获取地址列表
  rpc GetAddressList (GetAddressListReq) returns (GetAddressListRsp);
  // 获取默认地址
  rpc GetDefaultAddress (GetDefaultAddressReq) returns (GetDefaultAddressRsp);
  // 设置默认地址
  rpc SetDefaultAddress (SetDefaultAddressReq) returns (SetDefaultAddressRsp);
  // 获取地址
  rpc GetAddress (GetAddressReq) returns (GetAddressRsp);
  // 添加地址
  rpc AddAddress (AddAddressReq) returns (AddAddressRsp);
  // 更新地址
  rpc UpdateAddress (UpdateAddressReq) returns (UpdateAddressRsp);
  // 删除地址
  rpc RemAddress (RemAddressReq) returns (RemAddressRsp);

  // 添加星尘
  rpc AddStardust (AddStardustReq) returns (AddStardustRsp);
  // 获取用户星尘数
  rpc GetStardust (GetStardustReq) returns (GetStardustRsp);
  // 获取用户星尘记录
  rpc GetStardustRecord (GetStardustRecordReq) returns (GetStardustRecordRsp);
}
